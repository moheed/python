Python’s decorators allow you to extend and modify the behavior of a 
callable (functions, methods, and classes) without permanently modifying the callable itself.

Any sufficiently generic functionality you can “tack on” to an existing class or function’s 
behavior makes a great use case for decoration. This includes:

logging,
enforcing access control and authentication,
instrumentation and timing functions,
rate-limiting,
caching; and more.

First class object:
In short, it means there are no restrictions on the object's use. It's the same as any other object.
Python’s functions and classes are first-class objects. You can assign them to variables, store them in 
data structures, pass them as arguments to other functions, and even return them as values from other functions.

NESTED functions:
nested functions can be returned as object to its callee(otherwise hidden) outside nesting function and they will work
even outside the nexting-function scope!

b.Functions Can Capture Local State
Not only can functions accept behaviors through arguments but they can also return behaviors. How cool is that?

Not only can functions return other functions, these inner functions can also capture and carry some of the 
parent function’s state with them.

Functions that do this are called lexical closures (or just closures, for short). A closure remembers the 
values from its enclosing lexical scope even when the program flow is no longer in that scope.

def get_speak_func(text, volume):
    def whisper():
        return text.lower() + '...'
    def yell():
        return text.upper() + '!'
    if volume > 0.5:
        return yell
    else:
        return whisper

>>> get_speak_func('Hello, World', 0.7)()
'HELLO, WORLD!'

c. Objects Can Behave Like Functions
Object’s aren’t functions in Python. But they can be made callable, which allows you to treat them 
like functions in many cases.

If an object is callable it means you can use round parentheses () on it and pass function call 
arguments to it. 
class Adder:
    def __init__(self, n):
         self.n = n
    def __call__(self, x):
        return self.n + x

>>> plus_3 = Adder(3)
>>> plus_3(4)
7


Key Takeaways
Everything in Python is an object, including functions. You can assign them to variables, store them in data structures, and pass or return them to and from other functions (first-class functions.)
First-class functions allow you to abstract away and pass around behavior in your programs.
Functions can be nested and they can capture and carry some of the parent function’s state with them. Functions that do this are called closures.
Objects can be made callable which allows you to treat them like functions in many cases.
